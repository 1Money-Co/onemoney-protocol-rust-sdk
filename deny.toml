# cargo-deny configuration file
# https://embarkstudios.github.io/cargo-deny/

[graph]
# If 1 or more target triples (and optionally, target_features) are specified,
# only the specified targets will be checked when running `cargo deny check`.
# This means, if a particular package is only ever used as a target specific
# dependency, such as, for example, `winapi` or `nix`, a problem with that
# package will not be reported if it's not used for a target you care about.
#
# If no targets are specified, or this configuration key is not set, all
# targets will be checked.
#targets = [
#    { triple = "x86_64-unknown-linux-gnu" },
#    { triple = "aarch64-apple-darwin" },
#    { triple = "x86_64-pc-windows-msvc" },
#]

# If true, metadata will be collected with `--all-features`. Note that this can't
# be toggled off if true, if you want to conditionally enable it it's recommended
# to pass `--all-features` on the cmd line instead
all-features = true

# If true, metadata will be collected with `--no-default-features`. The same
# caveat with `all-features` applies
no-default-features = false

# If set, these feature will be enabled when collecting metadata. If `--features`
# is specified on the command line they will take precedence over this option.
#features = []

# If true, ignores workspace crates that aren't published, or are only
# published to private registries.
# To see how to mark a crate as unpublished (to the official registry),
# visit https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field.
exclude-dev = false

[output]
# When outputting inclusion graphs in diagnostics that include features, this
# option can be used to specify the depth at which feature edges will be added.
# This option is included since the graphs can be quite large and the addition
# of features from the crate(s) to all of the graph roots can be far too verbose.
# This option can be overridden via `--feature-depth` on the cmd line
feature-depth = 1

[advisories]
# Use new configuration format with stricter defaults
version = 2
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# With version 2, defaults are:
# - vulnerability = "deny"
# - unmaintained = "deny"
# - unsound = "deny"
# - notice = "deny"
# - yanked = "warn" (unchanged)
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # paste crate is unmaintained but used by alloy-primitives as proc-macro
    # The functionality is stable and security risk is minimal for proc macros
    "RUSTSEC-2024-0436",
]
# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this threshold will be ignored. Note that ignored advisories will
# still output a note when they are encountered.
# * None (default) - CVSS Score 0.0
# * Low - CVSS Score 0.1 - 3.9
# * Medium - CVSS Score 4.0 - 6.9
# * High - CVSS Score 7.0 - 8.9
# * Critical - CVSS Score 9.0 - 10.0
#severity-threshold =

[licenses]
# Use new configuration format with stricter defaults
version = 2
# With version 2, defaults are:
# - unlicensed = "deny"
# - allow-osi-fsf-free = "neither"
# - copyleft = "deny"
# - default = "deny"
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.11 short identifier (+ optional exception)].
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "Unicode-3.0",
    "CC0-1.0",
    "Zlib",
    "0BSD",
    "BlueOak-1.0.0",
    "BSL-1.0",
    "MPL-2.0",
    "CDLA-Permissive-2.0",
]
# List of allowed licenses for particular crate
#[[licenses.exceptions]]
#name = "ring"
#allow = ["OpenSSL"]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * all - all edges are highlighted
# * first-set-of-sources - only the first set of sources is highlighted
# * sources - all sources are highlighted
# * destinations - all destinations are highlighted
# * none - no highlighting
highlight = "all"
# The default lint level for `default` features for crates that are members
# of the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
workspace-default-features = "allow"
# The default lint level for `default` features for external crates that are not
# members of the workspace that is being checked. This can be overridden by allowing/denying
# `default` on a crate-by-crate basis if desired.
external-default-features = "allow"
# List of crates that are allowed. Use with care!
allow = [
    #{ name = "ansi_term", version = "=0.11.0" },
]
# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "=0.11.0" },

    # Wrapper crates can optionally be specified to allow the crate when it
    # is a direct dependency of the otherwise banned crate
    #{ name = "ansi_term", version = "=0.11.0", wrappers = [] },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ name = "ansi_term", version = "=0.11.0" },
]
# Similarly to `skip` allows you to skip certain crates from being checked. Unlike `skip`,
# a skipped crate is removed from the dependency graph entirely and all of its dependencies
# won't be checked either.
skip-tree = [
    #{ name = "ansi_term", version = "=0.11.0" },
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = []
